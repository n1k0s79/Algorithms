using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Euler
{
    // Largest product in a series
    //Problem 8

    //The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

    //73167176531330624919225119674426574742355349194934
    //96983520312774506326239578318016984801869478851843
    //85861560789112949495459501737958331952853208805511
    //12540698747158523863050715693290963295227443043557
    //66896648950445244523161731856403098711121722383113
    //62229893423380308135336276614282806444486645238749
    //30358907296290491560440772390713810515859307960866
    //70172427121883998797908792274921901699720888093776
    //65727333001053367881220235421809751254540594752243
    //52584907711670556013604839586446706324415722155397
    //53697817977846174064955149290862569321978468622482
    //83972241375657056057490261407972968652414535100474
    //82166370484403199890008895243450658541227588666881
    //16427171479924442928230863465674813919123162824586
    //17866458359124566529476545682848912883142607690042
    //24219022671055626321111109370544217506941658960408
    //07198403850962455444362981230987879927244284909188
    //84580156166097919133875499200524063689912560717606
    //05886116467109405077541002256983155200055935729725
    //71636269561882670428252483600823257530420752963450

    // Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

    [TestClass]
    public class Problem008_Largest_product
    {
        /// <summary> Brute forc, very slow  </summary>
        public static long Solution()
        {
            var numbers = new List<string>();
            long largestProduct = 0;
            string digits = string.Empty;
            int foundIndex = 0;

            const int adj = 13;
            for (int index = 0; index < LargeNumber.Length - adj +1; index++)
            {
                var s = LargeNumber.Substring(index, adj);
                numbers.Add(s);
                long product = Product(s);
                if (product > largestProduct)
                {
                    largestProduct = product;
                    foundIndex = index;
                    digits = s;
                }
            }

            var last = numbers[numbers.Count - 1];
            return largestProduct;
        }

        private static long Product(string s)
        {
            if (s.Contains("0")) return 0;
            long ret = 1;
            foreach (var c in s)
            {
                int a = int.Parse(c.ToString());
                checked
                {
                    ret *= a;    
                }
            }
            return ret;
        }

        [TestMethod]
        public void TestSolution()
        {
            Assert.AreEqual(23514624000, Solution());
        }

        private static string LargeNumber
        {
            get
            {
                return "73167176531330624919225119674426574742355349194934" +
                       "96983520312774506326239578318016984801869478851843" +
                       "85861560789112949495459501737958331952853208805511" +
                       "12540698747158523863050715693290963295227443043557" +
                       "66896648950445244523161731856403098711121722383113" +
                       "62229893423380308135336276614282806444486645238749" +
                       "30358907296290491560440772390713810515859307960866" +
                       "70172427121883998797908792274921901699720888093776" +
                       "65727333001053367881220235421809751254540594752243" +
                       "52584907711670556013604839586446706324415722155397" +
                       "53697817977846174064955149290862569321978468622482" +
                       "83972241375657056057490261407972968652414535100474" +
                       "82166370484403199890008895243450658541227588666881" +
                       "16427171479924442928230863465674813919123162824586" +
                       "17866458359124566529476545682848912883142607690042" +
                       "24219022671055626321111109370544217506941658960408" +
                       "07198403850962455444362981230987879927244284909188" +
                       "84580156166097919133875499200524063689912560717606" +
                       "05886116467109405077541002256983155200055935729725" +
                       "71636269561882670428252483600823257530420752963450";
            }
        }
    }
}