using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Codility
{
//    Cyclic rotation
//----------------------
//Mετακίνηση όλων των στοιχείων ενός πίνακα δεξιά ή αριστερά.
//Ήταν εύκολο να μετακινήσω όλα τα στοιχεία του πίνακα κατά μία θέση δεξιά ή αριστερά.
//Αν όμως θέλω να τα μετακινήσω κατά Μ θέσεις;
//Κατ' αρχάς αναρωτιέμαι τι συμβαίνει όταν Μ > Ν. Εύκολα βλέπω ότι η περιστροφή κατά Μ είναι η ίδια με την Μ % Ν. Μόνο που με τη δεύτερη κερδίζω χρόνο.
//Μετά:
//Μπορώ να τρέξω τον αλγόριθμο για μετακίνηση μίας θέσης Ν φορές.Έτσι όμως έχω πολυπλοκότητα Μ* Ν(η οποία βέβαα είναι γραμμική)
//Επίσης μπορώ να φτιάξω ένα νέο πίνακα και να φέρω τα στοιχεία ένα-ένα.Έτσι όμως έχω πολυπλοκότητα χώρου Ν.
//Βρήκα στο ίντερνετ μία άλλη λύση: κάντω την αντικατάσταση με "πηδηματάκια". Το μήκος του πηδηματακίου είναι Μ.
//Αν με το πήδημα βγω εκτός του πίνακα συνεχίζω από την αρχή. Σταματώ όταν με το τελευταίο πήδημα εκεί από όπου ξεκίνησα.
//Στον ίντερνετ βρήκα μία συνθήκη τερματισμού του αλγόριθμου που χρησιμοποιούμε το μέγιστο κοινό διαιρέτη. Όμως δεν την κατάλαβα.
//Αν' αυτού για τη συνθήκη τερματισμού έβαλα τον αριθμό τον αντικαταστάσεων (πρέπει να φτάσω στο Ν).



   [TestClass]
    public class CyclicRotation
    {
        public static int[] solution(int[] A, int K)
        {
            Arrays.Rotator.Rotate<int>(A, K, Arrays.Rotator.Directions.Right);
            return A;
        }

        [TestMethod]
        public void TestSolution()
        {
            var a = new int[] { 1, 2, 3, 4, 5 };
        }     
    }
}